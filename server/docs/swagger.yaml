basePath: /api/v1
definitions:
  model.AuthResponse:
    properties:
      id:
        type: integer
      token:
        $ref: '#/definitions/model.TokenResponse'
      username:
        type: string
    type: object
  model.Bucket:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      owner_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.BucketCreateRequest:
    properties:
      description:
        maxLength: 255
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        maxLength: 63
        minLength: 3
        type: string
    required:
    - name
    type: object
  model.BucketListResponse:
    properties:
      buckets:
        items:
          $ref: '#/definitions/model.Bucket'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  model.BucketPermission:
    properties:
      access:
        description: read, write, admin
        type: string
      bucket_id:
        type: integer
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.BucketResponse:
    properties:
      bucket:
        $ref: '#/definitions/model.Bucket'
      permissions:
        items:
          $ref: '#/definitions/model.BucketPermission'
        type: array
    type: object
  model.BucketUpdateRequest:
    properties:
      description:
        maxLength: 255
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        maxLength: 63
        minLength: 3
        type: string
    type: object
  model.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  model.FileDownloadResponse:
    properties:
      download_url:
        type: string
      expires_at:
        type: string
      file:
        $ref: '#/definitions/model.FileResponse'
    type: object
  model.FileListResponse:
    properties:
      files:
        items:
          $ref: '#/definitions/model.FileResponse'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  model.FileResponse:
    properties:
      bucket_id:
        type: integer
      content_type:
        type: string
      created_at:
        type: string
      id:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      path:
        type: string
      size:
        type: integer
      updated_at:
        type: string
    type: object
  model.FileUpdateRequest:
    properties:
      content_type:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        maxLength: 255
        minLength: 1
        type: string
      path:
        type: string
    type: object
  model.FileUploadResponse:
    properties:
      file:
        $ref: '#/definitions/model.FileResponse'
      upload_url:
        type: string
    type: object
  model.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.RegisterRequest:
    properties:
      is_root:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.TokenResponse:
    properties:
      token:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_root:
        type: boolean
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.UserListResponse:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.UserPermission:
    properties:
      action:
        type: string
      created_at:
        type: string
      id:
        type: integer
      resource:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.UserResponse:
    properties:
      permissions:
        items:
          $ref: '#/definitions/model.UserPermission'
        type: array
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.UserUpdateRequest:
    properties:
      is_root:
        type: boolean
      status:
        enum:
        - active
        - inactive
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  util.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Private File Storage System API documentation
  title: PFSS API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /buckets:
    get:
      consumes:
      - application/json
      description: Get a list of buckets with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BucketListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: List buckets
      tags:
      - buckets
    post:
      consumes:
      - application/json
      description: Create a new bucket
      parameters:
      - description: Bucket create request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.BucketCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.BucketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Create bucket
      tags:
      - buckets
  /buckets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a bucket
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete bucket
      tags:
      - buckets
    get:
      consumes:
      - application/json
      description: Get details of a specific bucket
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BucketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get bucket details
      tags:
      - buckets
    put:
      consumes:
      - application/json
      description: Update bucket information
      parameters:
      - description: Bucket ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bucket update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.BucketUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BucketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Update bucket
      tags:
      - buckets
  /files:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Upload a file to a specific bucket. The file will be stored in the 'upload/{bucket_name}' directory.
        The file name will be made unique by appending a timestamp.
      parameters:
      - description: Target bucket ID to upload the file to
        in: formData
        name: bucket_id
        required: true
        type: string
      - description: The file to upload (supports any file type)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: File uploaded successfully
          schema:
            $ref: '#/definitions/model.FileResponse'
        "400":
          description: Invalid request, missing file, or invalid bucket ID
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized - valid JWT token required
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Permission denied - requires write access to bucket
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Upload file to bucket
      tags:
      - files
  /files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete file
      tags:
      - files
    get:
      consumes:
      - application/json
      description: Get details of a specific file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get file details
      tags:
      - files
    put:
      consumes:
      - application/json
      description: Update file information
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      - description: File update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.FileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Update file
      tags:
      - files
  /files/{id}/download:
    get:
      consumes:
      - application/json
      description: Get a pre-signed URL for file download
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FileDownloadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get download URL
      tags:
      - files
  /files/{id}/upload:
    get:
      consumes:
      - application/json
      description: Get a pre-signed URL for file upload
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get upload URL
      tags:
      - files
  /files/bucket/{bucket_id}:
    get:
      consumes:
      - application/json
      description: Get a list of files in a bucket with pagination
      parameters:
      - description: Bucket ID
        in: path
        name: bucket_id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FileListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: List files
      tags:
      - files
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: List users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get details of a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Get user details
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user
      tags:
      - users
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Change user password with old and new password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - auth
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
